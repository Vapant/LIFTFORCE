from pathlib import Path
from ultralytics import YOLO
import cv2
import numpy as np
import pytesseract
from PIL import Image
import re

def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–∏"""
    print("üîç –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò")
    print("=" * 30)
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
    model_path = Path(r"H:\–£—á—ë–±–∞\–•–∞–∫–∞—Ç–æ–Ω—ã\–¶–∏—Ñ—Ä–∞\2025-26\–ö–∞–º–µ—Ä–∞\–¶–∏—Ñ—Ä–∞\runs\detect\nomeroff_yolov8n\weights\best.pt")
    
    if model_path.exists():
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model = YOLO(str(model_path))
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"üìä –ö–ª–∞—Å—Å—ã: {model.names}")
        
        return model
    else:
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {model_path}")
        return None

def preprocess_license_plate(plate_image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è OCR"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä—ã–π
    gray = cv2.cvtColor(plate_image, cv2.COLOR_BGR2GRAY)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    contrast = clahe.apply(gray)
    
    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    _, binary = cv2.threshold(contrast, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    # –£–±–∏—Ä–∞–µ–º —à—É–º
    kernel = np.ones((2, 2), np.uint8)
    cleaned = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
    
    return cleaned

def recognize_license_plate_text(plate_image):
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–º–µ—Ä–Ω–æ–º –∑–Ω–∞–∫–µ"""
    try:
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed_plate = preprocess_license_plate(plate_image)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Tesseract (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
        custom_config = r'--oem 3 --psm 8 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = pytesseract.image_to_string(processed_plate, config=custom_config)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        cleaned_text = re.sub(r'[^A-Z0-9]', '', text.upper().strip())
        
        return cleaned_text if cleaned_text else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"

def process_image_with_model(model, image_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é —Å OCR"""
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = cv2.imread(str(image_path))
    if image is None:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        return
    
    # –î–µ—Ç–µ–∫—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏
    results = model(image)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    output_image = image.copy()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    detections_count = 0
    for r in results:
        if len(r.boxes) > 0:
            for i, box in enumerate(r.boxes):
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                confidence = box.conf[0]
                class_id = int(box.cls[0])
                class_name = model.names[class_id]
                
                # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                plate_roi = image[y1:y2, x1:x2]
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–º–µ—Ä–Ω–æ–º –∑–Ω–∞–∫–µ
                plate_text = recognize_license_plate_text(plate_roi)
                
                # –†–∏—Å—É–µ–º bounding box
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π
                cv2.rectangle(output_image, (x1, y1), (x2, y2), color, 3)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
                label = f"{plate_text} ({confidence:.2f})"
                label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)[0]
                
                # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                cv2.rectangle(output_image, (x1, y1 - label_size[1] - 15), 
                            (x1 + label_size[0], y1), color, -1)
                
                # –¢–µ–∫—Å—Ç
                cv2.putText(output_image, label, (x1, y1 - 10), 
                          cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                
                detections_count += 1
                print(f"   ‚úÖ –ù–æ–º–µ—Ä {i+1}: {plate_text} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                plate_filename = f"plate_{image_path.stem}_{i+1}.jpg"
                cv2.imwrite(plate_filename, plate_roi)
                print(f"   üíæ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plate_filename}")
    
    if detections_count == 0:
        print("   ‚ùå –ù–æ–º–µ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    window_name = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {image_path.name}"
    cv2.imshow(window_name, output_image)
    print("üñºÔ∏è –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = f"detected_{image_path.name}"
    cv2.imwrite(output_path, output_image)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

def process_video_with_model(model, video_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –º–æ–¥–µ–ª—å—é —Å OCR"""
    print(f"\nüé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {video_path}")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
    cap = cv2.VideoCapture(str(video_path))
    if not cap.isOpened():
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
        return
    
    fps = cap.get(cv2.CAP_PROP_FPS)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:")
    print(f"   FPS: {fps}")
    print(f"   –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {total_frames}")
    
    print("\nüé¨ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∏ OCR...")
    print("   –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'p' –¥–ª—è –ø–∞—É–∑—ã")
    
    paused = False
    frame_count = 0
    
    while True:
        if not paused:
            ret, frame = cap.read()
            if not ret:
                print("‚úÖ –í–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                break
            
            frame_count += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π N-—ã–π –∫–∞–¥—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if frame_count % 5 == 0:
                # –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ
                results = model(frame)
                
                # –†–∏—Å—É–µ–º bounding boxes –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
                for r in results:
                    for box in r.boxes:
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        confidence = box.conf[0]
                        
                        # –í—ã—Ä–µ–∑–∞–µ–º –Ω–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫
                        plate_roi = frame[y1:y2, x1:x2]
                        if plate_roi.size > 0:
                            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
                            plate_text = recognize_license_plate_text(plate_roi)
                            
                            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                            label = f"{plate_text} ({confidence:.2f})"
                            cv2.putText(frame, label, (x1, y1 - 10), 
                                      cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä
        cv2.imshow(f"–í–∏–¥–µ–æ: {video_path.name}", frame)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
        elif key == ord('p'):
            paused = not paused
            print("‚è∏Ô∏è –ü–∞—É–∑–∞" if paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ")
    
    cap.release()
    cv2.destroyAllWindows()

def check_tesseract_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tesseract"""
    try:
        pytesseract.get_tesseract_version()
        print("‚úÖ Tesseract OCR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except:
        print("‚ùå Tesseract OCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract:")
        print("   Windows: https://github.com/UB-Mannheim/tesseract/wiki")
        print("   Linux: sudo apt-get install tesseract-ocr")
        print("   Mac: brew install tesseract")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Tesseract
    if not check_tesseract_installation():
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–∏
    model = load_model()
    if not model:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
        return
    
    print("\nüéØ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:")
    print("1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏")
    print("2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
    print("3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–∫–∞–º–µ—Ä—ã")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏
        folder_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–∞–ø–∫–∏ 'test_images'): ").strip()
        if not folder_path:
            folder_path = "test_images"
        
        image_folder = Path(folder_path)
        if not image_folder.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
        image_files = []
        for ext in image_extensions:
            image_files.extend(image_folder.glob(ext))
            image_files.extend(image_folder.glob(ext.upper()))
        
        if not image_files:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {folder_path}")
            return
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for img_path in sorted(image_files):
            process_image_with_model(model, img_path)
    
    elif choice == "2":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
        video_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É: ").strip()
        if not video_path:
            print("‚ùå –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        video_file = Path(video_path)
        if not video_file.exists():
            print(f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return
        
        process_video_with_model(model, video_file)
    
    elif choice == "3":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–∫–∞–º–µ—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        print("üìπ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∫–∞–º–µ—Ä—ã —Å OCR...")
        print("   –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É")
            return
        
        frame_count = 0
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            frame_count += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π 10-—ã–π –∫–∞–¥—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if frame_count % 10 == 0:
                results = model(frame)
                
                for r in results:
                    for box in r.boxes:
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        confidence = box.conf[0]
                        
                        plate_roi = frame[y1:y2, x1:x2]
                        if plate_roi.size > 0:
                            plate_text = recognize_license_plate_text(plate_roi)
                            
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                            label = f"{plate_text} ({confidence:.2f})"
                            cv2.putText(frame, label, (x1, y1 - 10), 
                                      cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
            
            cv2.imshow("–í–µ–±-–∫–∞–º–µ—Ä–∞ - –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å OCR", frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()